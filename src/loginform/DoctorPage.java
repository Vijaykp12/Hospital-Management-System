/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package loginform;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.*;
import java.sql.Date;
import java.lang.String;

import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import java.text.SimpleDateFormat;

import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author VIJAYARJUN
 */
public class DoctorPage extends javax.swing.JFrame {
    Connection con;
    Statement st;
    PreparedStatement ps;
    ResultSet rs;
    int docID;
    int doctorId;
    int patientId;
    java.sql.Date sqlDate1;
    /**
     * Creates new form DoctorPage
     */
    public DoctorPage(Connection con,int docId) {
        this.con = con;
        this.docID = docId;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        AddDoc = new javax.swing.JButton();
        AddDoctor = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        AddDoc.setBackground(new java.awt.Color(255, 0, 0));
        AddDoc.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        AddDoc.setText("Appointments");
        AddDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddDocActionPerformed(evt);
            }
        });

        AddDoctor.setBackground(new java.awt.Color(255, 0, 0));
        AddDoctor.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        AddDoctor.setText("Write Prescription");
        AddDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddDoctorActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));

        jButton2.setText("LOGOUT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(42, 42, 42))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(AddDoctor)
                    .addComponent(AddDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 725, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(AddDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(AddDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                                                       boolean isSelected, boolean hasFocus,
                                                       int row, int column) {
            setText((value == null) ? "Not" : value.toString());
            return this;
        }
    }

    class ButtonEditor extends DefaultCellEditor {
        protected JButton button;
        private String label;
        private boolean isPushed;
        private JTable table;
        

        public ButtonEditor(JCheckBox checkBox,JTable table) {
            super(checkBox);
            
            this.table = table;
            button = new JButton();
        
            button.setOpaque(true);
            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                  
                    // You can add DB update code here to mark the booking
                    fireEditingStopped(); // important!
                }
            });
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                                                 boolean isSelected, int row, int column) {
            isPushed = true;
            return button;
        }
        
        
        public Object getCellEditorValue() {
            if (isPushed) {
                // âœ… Only run this when button is actually clicked
                try {
                    int row = table.getSelectedRow();
                    doctorId = (int) table.getValueAt(row, 1);
                    patientId = Integer.parseInt(table.getValueAt(row, 2).toString());
                    String time = table.getValueAt(row, 3).toString();
                    Date doi = (Date) table.getValueAt(row, 4);
                    sqlDate1 = new java.sql.Date(doi.getTime());
                    String medicine = table.getValueAt(row, 5).toString();
                    

                  

                    // Delete old billing record
                    PreparedStatement ps1 = con.prepareStatement(
                        "DELETE FROM Appointment WHERE DoctorID = ? AND PatientID = ? "
                    );
                    ps1.setInt(1, doctorId);
                    ps1.setInt(2, patientId);
                    int rows1 = ps1.executeUpdate();
                    System.out.println("Deleted From Appoinment");

                    if (rows1 > 0) {
                        // Insert new billing record
                        PreparedStatement ps = con.prepareStatement(
                            "INSERT INTO Appointment VALUES (Appointment_seq.NEXTVAL,?,?,?,?,?,?)"
                        );
                        ps.setInt(1, doctorId);
                        ps.setInt(2, patientId);
                        ps.setString(3, time);
                        ps.setDate(4, sqlDate1);
                        ps.setString(5, medicine);
                        ps.setString(6, "Pending");
                        

                        int rows = ps.executeUpdate();
                        if (rows > 0) {
                            JOptionPane.showMessageDialog(button, "Successfully Updated Appointment.");
                            table.revalidate();
                            table.repaint();
                            // Optionally call loadBillingDataIntoTable(); if needed
                        }
                    }

                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(button, "Error: " + ex.getMessage());
                }
            }

            isPushed = false;
            return new String("Update");
        }

        public boolean stopCellEditing() {
            isPushed = false;
            return super.stopCellEditing();
        }

        public void fireEditingStopped() {
            super.fireEditingStopped();
        }
    }
    
    private void AddDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddDocActionPerformed
        // TODO add your handling code here:
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return column == 7; // Only the 'Book' button column is editable
                }
            };
            
            

            model.addColumn("BID");
            model.addColumn("DoctorID");
            model.addColumn("PatientID");
            model.addColumn("Time");
            model.addColumn("Date");
            model.addColumn("Status");
            model.addColumn("Approved");
            model.addColumn("Finish"); // Book button

            ps = con.prepareStatement("SELECT * FROM Appointment where DoctorID = ? AND Approved IS NULL");
            ps.setInt(1, docID);
            System.out.println("PreparedStatement: " + ps.toString());
            rs = ps.executeQuery();
            boolean found = false;
            while (rs.next()) {
                found = true;
                 // assuming it's numeric
                model.addRow(new Object[]{
                    rs.getString("ID"),
                    rs.getInt("DoctorID"),
                    rs.getString("PatientID"),
                    rs.getString("Appointment_Time"),
                    rs.getDate("Appointment_Date"),
                    rs.getString("Status"),
                    rs.getString("Approved"),
                    "Finish"
                });
            }
            
            if (!found) {
                JOptionPane.showMessageDialog(this, "No appointments found.");
            }

            JTable table = new JTable(model);
            table.setRowHeight(40);
            // Color Availability column
            

            // Button column
            table.getColumn("Finish").setCellRenderer(new DoctorPage.ButtonRenderer());
            table.getColumn("Finish").setCellEditor(new DoctorPage.ButtonEditor(new JCheckBox(), table));
            

            // Set table in scroll pane (replace yourScrollPane with your actual scroll pane variable)
            jScrollPane1.setViewportView(table);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading doctor data: " + e.getMessage());
        }
    }//GEN-LAST:event_AddDocActionPerformed
    

    private void AddDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddDoctorActionPerformed
        // TODO add your handling code here:
        Prescription pres = new Prescription(con,doctorId,patientId,sqlDate1);
        pres.setVisible(true);
        pres.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_AddDoctorActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
LoginFormMain sp = new LoginFormMain(con);
        sp.setVisible(true);
        sp.setLocationRelativeTo(null);
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoctorPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoctorPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoctorPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoctorPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddDoc;
    private javax.swing.JButton AddDoctor;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
