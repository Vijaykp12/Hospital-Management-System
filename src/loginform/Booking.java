/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package loginform;
import javax.swing.*;
import java.sql.*;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.DefaultCellEditor;

/**
 *
 * @author VIJAYARJUN
 */

public class Booking extends javax.swing.JFrame {
    Connection con;
    Statement st;
    PreparedStatement ps;
    ResultSet rs;
    int patientId;
    /**
     * Creates new form Booking
     */
    public Booking(Connection con,int patientid) {
        this.con = con;
        this.patientId = patientid;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Bg = new javax.swing.JPanel();
        List = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        Back = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Bg.setBackground(new java.awt.Color(255, 0, 51));

        List.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                ListAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Available Doctors"); // NOI18N

        Back.setBackground(new java.awt.Color(255, 0, 51));
        Back.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Back.setText("Back");
        Back.setBorder(null);
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BgLayout = new javax.swing.GroupLayout(Bg);
        Bg.setLayout(BgLayout);
        BgLayout.setHorizontalGroup(
            BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BgLayout.createSequentialGroup()
                .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BgLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(List, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(BgLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(Back)))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        BgLayout.setVerticalGroup(
            BgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BgLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Back)
                .addGap(1, 1, 1)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(List, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                                                       boolean isSelected, boolean hasFocus,
                                                       int row, int column) {
            setText((value == null) ? "Book" : value.toString());
            return this;
        }
    }

    class ButtonEditor extends DefaultCellEditor {
        protected JButton button;
        private String label;
        private JTable table;
        

        public ButtonEditor(JCheckBox checkBox,JTable table,int patientid) {
            super(checkBox);
            
            this.table = table;
            button = new JButton();
        
            button.setOpaque(true);
            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    
                    int row = table.getSelectedRow();
                    int doctorId = (int) table.getValueAt(row, 0);
                    int avail = (int) table.getValueAt(row,5);
                    if (avail <= 0){
                        JOptionPane.showMessageDialog(button,"This Doctor cannot be booked");
                        fireEditingStopped();
                        return;
                    }
                    try{
                        ps = con.prepareStatement("Insert into Appointment(ID,DoctorID,PatientID,Appointment_Time,Appointment_Date,Status)Values (Appointment_seq.NEXTVAL,?,?,?,?,?)");
                        ps.setInt(1,doctorId);
                        ps.setInt(2, patientid);
                        ps.setString(3, "10:30");
                        ps.setDate(4, new java.sql.Date(System.currentTimeMillis()));
                        ps.setString(5,"Confirmed");
                        
                        int rows = ps.executeUpdate();
                        /*Run this in Sql before for correct execution
                        CREATE SEQUENCE Appointment_seq
                        START WITH 1
                        INCREMENT BY 1
                        NOCACHE
                        NOCYCLE;*/

                        if (rows > 0){
                            JOptionPane.showMessageDialog(button,"Successfully booked.");
                            
                            table.setValueAt(avail-1, row, 5);
                            table.revalidate();
                            table.repaint();
                            PreparedStatement updateAvail = con.prepareStatement("Update Doctor Set Availability = ? where DoctorID = ?");
                            updateAvail.setInt(1,avail - 1);
                            updateAvail.setInt(2, doctorId);
                            updateAvail.executeUpdate();
                            
                        }
                    }
                    catch (SQLException ex){
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog(button, "Booked Doctor ID: " + doctorId);
                        
                    }
                    // You can add DB update code here to mark the booking
                    fireEditingStopped(); // important!
                }
            });
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                                                     boolean isSelected, int row, int column) {
            label = (value == null) ? "Book" : value.toString();
            button.setText(label);
            return button;
        }

        @Override
        public Object getCellEditorValue() {
            return label;
        }
    }

    private void ListAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_ListAncestorAdded
        // TODO add your handling code here:
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return column == 7; // Only the 'Book' button column is editable
                }
            };
            
            

            model.addColumn("Doctor ID");
            model.addColumn("Name");
            model.addColumn("Experience");
            model.addColumn("Qualification");
            model.addColumn("Specialty");
            model.addColumn("Availability");
            model.addColumn("Dept ID");
            model.addColumn("Action"); // Book button

            ps = con.prepareStatement("SELECT * FROM Doctor");
            System.out.println("PreparedStatement: " + ps.toString());
            rs = ps.executeQuery();
            boolean found = false;
            while (rs.next()) {
                found = true;
                int availability = Integer.parseInt(rs.getString("Availability")); // assuming it's numeric
                model.addRow(new Object[]{
                    rs.getInt("DoctorID"),
                    rs.getString("Name"),
                    rs.getInt("Experience"),
                    rs.getString("Qualification"),
                    rs.getString("Specialty"),
                    availability,
                    rs.getInt("DepartmentID"),
                    "Book"
                });
            }
            
            if (!found) {
                JOptionPane.showMessageDialog(this, "No appointments found.");
            }

            JTable table = new JTable(model);
            table.setRowHeight(40);
            // Color Availability column
            table.getColumnModel().getColumn(5).setCellRenderer(new DefaultTableCellRenderer() {
                @Override
                public Component getTableCellRendererComponent(JTable table, Object value,
                                                               boolean isSelected, boolean hasFocus,
                                                               int row, int column) {
                    Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                    int availability = Integer.parseInt(value.toString());
                    if (availability > 2) {
                        c.setBackground(Color.GREEN);
                    } else if (availability > 0) {
                        c.setBackground(Color.YELLOW);
                    } else {
                        c.setBackground(Color.LIGHT_GRAY);
                    }
                    return c;
                }
            });

            // Button column
            table.getColumn("Action").setCellRenderer(new ButtonRenderer());
            table.getColumn("Action").setCellEditor(new ButtonEditor(new JCheckBox(), table,patientId));

            // Set table in scroll pane (replace yourScrollPane with your actual scroll pane variable)
            List.setViewportView(table);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading doctor data: " + e.getMessage());
        }

    }//GEN-LAST:event_ListAncestorAdded

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
        Db db = new Db(con,patientId);
        db.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BackActionPerformed

    
    // Fetch doctor data from DB
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JPanel Bg;
    private javax.swing.JScrollPane List;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
