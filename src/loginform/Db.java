/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package loginform;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.TableCellRenderer;
/**
 *
 * @author VIJAYARJUN
 */
public class Db extends javax.swing.JFrame {
    Connection con;
    Statement st;
    PreparedStatement ps;
    ResultSet rs;
    int doctorId;
    int patientId;
    java.sql.Date sqlDate1;
    int PatientId;
    /**
     * Creates new form Db
     */
    public Db(Connection con,int PatientId) {
        this.con = con;
        this.PatientId = PatientId;
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Schedule = new javax.swing.JButton();
        Bills = new javax.swing.JButton();
        Appointment = new javax.swing.JButton();
        Medics = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 0, 51));

        Schedule.setText("Schedule");
        Schedule.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        Schedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScheduleActionPerformed(evt);
            }
        });

        Bills.setText("Bills");
        Bills.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        Bills.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BillsActionPerformed(evt);
            }
        });

        Appointment.setText("Book");
        Appointment.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        Appointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AppointmentActionPerformed(evt);
            }
        });

        Medics.setText("Medication");
        Medics.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        Medics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MedicsActionPerformed(evt);
            }
        });

        jButton2.setText("Pay");
        jButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Schedule, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Bills, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Appointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Medics, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(Schedule)
                .addGap(18, 18, 18)
                .addComponent(Bills)
                .addGap(18, 18, 18)
                .addComponent(Appointment)
                .addGap(18, 18, 18)
                .addComponent(Medics)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        jTabbedPane1.setForeground(new java.awt.Color(255, 204, 204));
        jTabbedPane1.setAutoscrolls(true);
        jScrollPane1.setViewportView(jTabbedPane1);

        jButton1.setText("LOGOUT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(23, 23, 23))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Add this at the top as class-level fields
   
    int patient = PatientId;

    
    private void ScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScheduleActionPerformed
        // TODO add your handling code here:

        DefaultTableModel model = new DefaultTableModel();
        JTable table = new JTable(model);
        table.setRowHeight(40);

        model.addColumn("Appointment ID");
        model.addColumn("Doctor ID");
        model.addColumn("Patient ID");
        model.addColumn("Time");
        model.addColumn("Date");
        model.addColumn("Status");

        try {
            System.out.println("Patient ID: " + PatientId); // Debug

            ps = con.prepareStatement("SELECT * FROM Appointment WHERE PatientID = ? AND TRUNC(Appointment_Date) = TRUNC(SYSDATE) ");
            ps.setInt(1, PatientId);
            System.out.println(PatientId);
            System.out.println("PreparedStatement: " + ps.toString());
            rs = ps.executeQuery();
            
            if (!rs.isBeforeFirst()) {
                System.out.println("No data returned from query.");
            }

            boolean found = false;
            while (rs.next()) {
                found = true;
                model.addRow(new Object[]{
                    rs.getInt("ID"),
                    rs.getInt("DoctorID"),
                    rs.getInt("PatientID"),
                    rs.getString("Appointment_Time"),
                    rs.getDate("Appointment_Date"),
                    rs.getString("Status")
                });
            }

            if (!found) {
                JOptionPane.showMessageDialog(this, "No appointments found.");
            }

            jTabbedPane1.removeAll();
            jTabbedPane1.add("Appointments", new JScrollPane(table));
            jTabbedPane1.setSelectedIndex(0);
            jTabbedPane1.revalidate();
            jTabbedPane1.repaint();

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "No data");
        }


    }//GEN-LAST:event_ScheduleActionPerformed
       
    private void BillsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BillsActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = new DefaultTableModel();
        JTable table = new JTable(model);
        table.setRowHeight(40);

        model.addColumn("Bill ID");
        model.addColumn("Doctor ID");
        model.addColumn("Patient ID");
        model.addColumn("Pharmacist ID");
        model.addColumn("Date");
        model.addColumn("Floor");
        model.addColumn("Amount");
        model.addColumn("Approved");

        try {

             ps = con.prepareStatement("SELECT * FROM Billing where Patient_ID = ? AND Approved = ?");
             ps.setInt(1, PatientId);
             ps.setString(2,"Payed");
             rs = ps.executeQuery();

            boolean found = false;
            while (rs.next()) {
                found = true;
                model.addRow(new Object[]{
                    rs.getInt("BillID"),
                    rs.getInt("DoctorID"),
                    rs.getInt("Patient_ID"),
                    rs.getInt("Pharmacist_ID"),
                    rs.getDate("DateOfIssue"),
                    rs.getString("Floor"),
                    rs.getDouble("Amount"),
                    rs.getString("Approved")
                });
            }
            
            if (!found) {
                JOptionPane.showMessageDialog(this, "No bills found.");
            }
            
            jTabbedPane1.removeAll(); // clear old data
            jTabbedPane1.add("Bills",new JScrollPane(table)); // add new table
        

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "No data");
        }
    }//GEN-LAST:event_BillsActionPerformed

    private void AppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AppointmentActionPerformed
        // TODO add your handling code here:
        Booking book = new Booking(con,PatientId);
        book.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_AppointmentActionPerformed

    private void MedicsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MedicsActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = new DefaultTableModel();
        JTable table = new JTable(model);
        table.setRowHeight(40);

        model.addColumn("RecordID");
        model.addColumn("Patient ID");
        model.addColumn("Doctor ID");
        
        model.addColumn("Admission");
        
        model.addColumn("Discharge");
        model.addColumn("Diagnosis"); 

        try {

             ps = con.prepareStatement("SELECT * FROM MedicalRecord where PatientID = ? ");
             ps.setInt(1, PatientId);
             rs = ps.executeQuery();

            boolean found = false;
            while (rs.next()) {
                found = true;
                model.addRow(new Object[]{
                    rs.getInt("ID"),
                    rs.getInt("PatientID"),
                    rs.getInt("DoctorID"),
                    
                    rs.getDate("Admission"),
                    
                    rs.getDate("Discharge"),
                    rs.getString("Diagnosis")
                });
            }

            if (!found) {
                JOptionPane.showMessageDialog(this, "No appointments found.");
            }
            
            jTabbedPane1.removeAll(); // clear old data
            jTabbedPane1.add("Medics",new JScrollPane(table)); // add new table
        

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "No data");
        }

    }//GEN-LAST:event_MedicsActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
LoginFormMain sp = new LoginFormMain(con);
        sp.setVisible(true);
        sp.setLocationRelativeTo(null);
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    
    class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                                                       boolean isSelected, boolean hasFocus,
                                                       int row, int column) {
            setText((value == null) ? "Not" : value.toString());
            return this;
        }
    }

    class ButtonEditor extends DefaultCellEditor {
        protected JButton button;
        private String label;
        private boolean isPushed;
        private JTable table;
        

        public ButtonEditor(JCheckBox checkBox,JTable table) {
            super(checkBox);
            
            this.table = table;
            button = new JButton();
        
            button.setOpaque(true);
            button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                  
                    // You can add DB update code here to mark the booking
                    fireEditingStopped(); // important!
                }
            });
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                                                 boolean isSelected, int row, int column) {
            isPushed = true;
            return button;
        }
        
        
        public Object getCellEditorValue() {
            if (isPushed) {
                // ✅ Only run this when button is actually clicked
                try {
                    int row = table.getSelectedRow();
                    doctorId = (int) table.getValueAt(row, 1);
                    patientId = Integer.parseInt(table.getValueAt(row, 2).toString());
                    String time = table.getValueAt(row, 3).toString();
                    Date doi = (Date) table.getValueAt(row, 4);
                    sqlDate1 = new java.sql.Date(doi.getTime());
                    String medicine = table.getValueAt(row, 5).toString();
                    

                  

                    // Delete old billing record
                    PreparedStatement ps1 = con.prepareStatement(
                        "DELETE FROM Appointment WHERE DoctorID = ? AND PatientID = ? AND Approved = ?"
                    );
                    ps1.setInt(1, doctorId);
                    ps1.setInt(2, patientId);
                    ps1.setString(3,"Pay");
                    int rows1 = ps1.executeUpdate();
                    System.out.println("Deleted From Appoinment");

                    if (rows1 > 0) {
                        // Insert new billing record
                        PreparedStatement ps = con.prepareStatement(
                            "INSERT INTO Appointment VALUES (Appointment_seq.NEXTVAL,?,?,?,?,?,?)"
                        );
                        ps.setInt(1, doctorId);
                        ps.setInt(2, patientId);
                        ps.setString(3, time);
                        ps.setDate(4, sqlDate1);
                        ps.setString(5, medicine);
                        ps.setString(6, "Payed");
                        

                        int rows = ps.executeUpdate();
                        if (rows > 0) {
                            JOptionPane.showMessageDialog(button, "Payment Completed");
                            table.revalidate();
                            table.repaint();
                            // Optionally call loadBillingDataIntoTable(); if needed
                        }
                        
                        ps = con.prepareStatement(
                            "INSERT INTO Billing VALUES (Appointment_seq.NEXTVAL,?,?,?,SYSDATE,?,?,?)"
                        );
                        ps.setInt(1, doctorId);
                        ps.setInt(2, patientId);
                        ps.setInt(3, 300);
                        
                        ps.setString(4,"Ground");
                        ps.setInt(5,3000);
                        ps.setString(6, "Payed");
                        

                        int rows2 = ps.executeUpdate();
                    
                        if (rows2 > 0) {
                            JOptionPane.showMessageDialog(button, "Billing Added");
                            table.revalidate();
                            table.repaint();
                            // Optionally call loadBillingDataIntoTable(); if needed
                        }
                    }

                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(button, "Error: " + ex.getMessage());
                }
            }

            isPushed = false;
            return new String("Update");
        }

        public boolean stopCellEditing() {
            isPushed = false;
            return super.stopCellEditing();
        }

        public void fireEditingStopped() {
            super.fireEditingStopped();
        }
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return column == 7; // Only the 'Book' button column is editable
                }
            };
            
            

            model.addColumn("BID");
            model.addColumn("DoctorID");
            model.addColumn("PatientID");
            model.addColumn("Time");
            model.addColumn("Date");
            model.addColumn("Status");
            model.addColumn("Approved");
            model.addColumn("Finish"); // Book button

            ps = con.prepareStatement("SELECT * FROM Appointment where Approved = ?");

            ps.setString(1,"Pay");
            System.out.println("PreparedStatement: " + ps.toString());
            rs = ps.executeQuery();
            boolean found = false;
            while (rs.next()) {
                found = true;
                 // assuming it's numeric
                model.addRow(new Object[]{
                    rs.getString("ID"),
                    rs.getInt("DoctorID"),
                    rs.getString("PatientID"),
                    rs.getString("Appointment_Time"),
                    rs.getDate("Appointment_Date"),
                    rs.getString("Status"),
                    rs.getString("Approved"),
                    "Finish"
                });
            }
            
            if (!found) {
                JOptionPane.showMessageDialog(this, "No appointments found.");
            }

            JTable table = new JTable(model);
            table.setRowHeight(40);
            // Color Availability column
            

            // Button column
            table.getColumn("Finish").setCellRenderer(new Db.ButtonRenderer());
            table.getColumn("Finish").setCellEditor(new Db.ButtonEditor(new JCheckBox(), table));
            

            // Set table in scroll pane (replace yourScrollPane with your actual scroll pane variable)
            jScrollPane1.setViewportView(table);

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading doctor data: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Db.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Db.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Db.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Db.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Appointment;
    private javax.swing.JButton Bills;
    private javax.swing.JButton Medics;
    private javax.swing.JButton Schedule;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
